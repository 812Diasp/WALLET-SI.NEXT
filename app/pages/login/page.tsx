'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, RootState } from '@/app/store';

import { setToken, setUser, setWalletId, setUserId } from '@/app/store/userSlice';
import { toggleTheme } from '@/app/store/themeSlice';
import {getToken} from "next-auth/jwt";

// –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω–ø—É—Ç–æ–≤ —Å –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º —Ç–µ–º
const inputClass = `bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg
  focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5
  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white
  transition-colors duration-500`;

export default function LoginPage() {
    const dispatch = useDispatch<AppDispatch>();
    const router = useRouter();
    const theme = useSelector((state: RootState) => state.theme.mode);

    const [isLogin, setIsLogin] = useState(true);
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const [isTransitioning, setIsTransitioning] = useState(false);
    const transitionRef = useRef<NodeJS.Timeout | null>(null);

    useEffect(() => {
        setIsTransitioning(true);

        if (transitionRef.current) {
            clearTimeout(transitionRef.current);
        }

        transitionRef.current = setTimeout(() => setIsTransitioning(false), 500);

        return () => {
            if (transitionRef.current) {
                clearTimeout(transitionRef.current);
            }
        };
    }, [theme]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (!isLogin && password !== confirmPassword) {
            setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return;
        }

        setError(null);
        setLoading(true);

        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            const res = await fetch(`http://localhost:5095/api/auth/${isLogin ? 'login' : 'register'}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(isLogin
                    ? { usernameOrEmail: username || email, password }
                    : { username, email, password, confirmPassword }),
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            const isJson = res.headers.get('content-type')?.includes('application/json');
            if (!res.ok) {
                let message = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
                if (isJson) {
                    const data = await res.json();
                    message = data.message || message;
                } else {
                    const text = await res.text();
                    message = text || message;
                }
                setError(message);
                return;
            }

            const data = await res.json();
            console.log('Auth response:', data); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!data.token || !data.userId) {
                throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            dispatch(setToken(data.token));
            dispatch(setUserId(data.userId));

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å walletId –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            let walletId = data.walletId || data.Wallet?.Id || null;

            // –ï—Å–ª–∏ walletId –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, –¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            if (!walletId) {
                console.log('WalletId not found in auth response, making additional request...');
                const walletRes = await fetch(`http://localhost:5095/api/wallet/${data.userId}`, {
                    headers: {
                        'Authorization': `Bearer ${data.token}`
                    }
                });

                if (walletRes.ok) {
                    const walletData = await walletRes.json();
                    console.log('Wallet response:', walletData);
                    walletId = walletData.id || walletData.Id || walletData.walletId;
                }
            }

            // –ï—Å–ª–∏ walletId –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if (walletId) {
                dispatch(setWalletId(walletId));
                localStorage.setItem('walletId', walletId);
                console.log('WalletId saved:', walletId);
            } else {
                console.warn('WalletId not found after all attempts');
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º email, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (data.email) {
                dispatch(setUser({ email: data.email }));
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            localStorage.setItem('token', data.token);
            localStorage.setItem('userId', data.userId);

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            router.push('/pages/wallet');

        } catch (err: any) {
            console.error('Auth error:', err);
            setError(err?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div
            className={`flex flex-col items-center justify-center min-h-screen
        ${theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'}
        transition-colors duration-500`}
        >
            {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã */}
            <button
                onClick={() => dispatch(toggleTheme())}
                className="absolute top-4 right-4 p-2 rounded-full bg-gray-300 dark:bg-gray-700 transition-colors duration-500"
            >
                {theme === 'dark' ? '‚òÄÔ∏è' : 'üåô'}
            </button>

            <form
                onSubmit={handleSubmit}
                className={`w-full max-w-md mx-auto space-y-4 rounded-lg shadow-md p-6
          ${theme === 'dark' ? 'bg-gray-800' : 'bg-white'}
          transition-colors duration-500`}
            >
                <h1 className="text-2xl font-bold text-center mb-6">
                    {isLogin ? '–í—Ö–æ–¥ –≤ SI.WALLET' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ SI.WALLET'}
                </h1>

                {!isLogin && (
                    <div>
                        <label htmlFor="username" className="block mb-2 text-sm font-medium">
                            –õ–æ–≥–∏–Ω
                        </label>
                        <input
                            id="username"
                            type="text"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                            className={inputClass}
                            required
                        />
                    </div>
                )}

                <div>
                    <label htmlFor="email" className="block mb-2 text-sm font-medium">
                        –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
                    </label>
                    <input
                        id="email"
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="name@example.com"
                        className={inputClass}
                        required
                    />
                </div>

                <div>
                    <label htmlFor="password" className="block mb-2 text-sm font-medium">
                        –ü–∞—Ä–æ–ª—å
                    </label>
                    <input
                        id="password"
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                        className={inputClass}
                        required
                    />
                </div>

                {!isLogin && (
                    <div>
                        <label htmlFor="confirmPassword" className="block mb-2 text-sm font-medium">
                            –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å
                        </label>
                        <input
                            id="confirmPassword"
                            type="password"
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            className={inputClass}
                            required
                        />
                    </div>
                )}

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded-md text-sm">
                        {error}
                    </div>
                )}

                <button
                    type="submit"
                    disabled={loading}
                    className="w-full mt-4 px-4 py-2 text-white bg-blue-600 hover:bg-blue-700 rounded-lg disabled:bg-blue-300 transition-colors duration-500"
                >
                    {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
                </button>

                <p className="mt-2 text-center text-sm">
                    {isLogin ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'}{' '}
                    <button
                        type="button"
                        onClick={() => setIsLogin(!isLogin)}
                        className="text-blue-500 hover:underline"
                    >
                        {isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å' : '–í–æ–π–¥–∏—Ç–µ'}
                    </button>
                </p>
            </form>
        </div>
    );
}
